plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle' version '[6.0.18,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
}

version = project.mod_version
group = 'com.tom5454.more-immersive-wires' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'more-immersive-wires-1.20.1'

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: '1.20.1'
    //mappings channel: 'parchment', version: '2021.12.19-1.18.1'

    //accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'
            
            property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
			
			property 'production', 'true' //IC2 Classic breaks

            mods {
                more_immersive_wires {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'
            
            property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
			
			property 'production', 'true' //IC2 Classic breaks

            mods {
                more_immersive_wires {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'
            
            property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            
            property 'production', 'true' //IC2 Classic breaks

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'more_immersive_wires', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/'), '--existing-mod', 'immersiveengineering', '--existing-mod', 'computercraft'

            mods {
                more_immersive_wires {
                    source sourceSets.main
                }
            }
        }
    }
    
    runs.each { run -> run.taskName = project.name + (run.taskName.startsWith("run") ? run.taskName.substring(3) : run.taskName) }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }
sourceSets {
	datagen {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
        compileClasspath += main.output
        runtimeClasspath += main.output
    }
}

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }
    maven {
    	// location of the maven that hosts JEI files since January 2023
    	name = "Jared's maven"
    	url = "https://maven.blamejared.com/"
  	}
  	maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.architectury.dev/" }
    maven {
        url 'https://www.cursemaven.com'
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
    	url = "http://localhost:8000"
		allowInsecureProtocol true
		content {
            includeGroup "local"
        }
	}
	maven {
        // Location of the maven for mixed mappings, Registrate, and Flywheel
        name 'tterrag maven'
        url 'https://maven.tterrag.com'
    }
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.neoforged:forge:1.20.1-47.1.54'

    // Real mod deobf dependency examples - these get remapped to your current mappings
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
    
    // compile against the JEI API but do not include it at runtime
    compileOnly fg.deobf("mezz.jei:jei-1.20.1-forge-api:15.2.0.23")
    compileOnly fg.deobf("mezz.jei:jei-1.20.1-common-api:15.2.0.23")
  	// at runtime, use the full JEI jar
  	runtimeOnly fg.deobf("mezz.jei:jei-1.20.1-forge:15.2.0.23")
  	
  	compileOnly fg.deobf('curse.maven:immersive-engineering-231951:4782978')
    compileOnly fg.deobf('curse.maven:applied-energistics-2-223794:4777696')
    compileOnly fg.deobf('curse.maven:refined-storage-243076:4630564')
    compileOnly fg.deobf('curse.maven:cc-tweaked-282001:5293514')
    
    //compileOnly fg.deobf('curse.maven:ic2-classic-242942:4558911')
    
    compileOnly fg.deobf('curse.maven:integrated-dynamics-236307:4766512')
    compileOnly fg.deobf('curse.maven:cyclops-core-232758:4724211')
    compileOnly fg.deobf('curse.maven:common-capabilities-247007:4620480')
    
    //compileOnly fg.deobf('curse.maven:ftb-industrial-contraptions-forge-539097:4392862')
    //compileOnly fg.deobf("dev.architectury:architectury-forge:6.4.62")
    //compileOnly fg.deobf('curse.maven:ftb-library-forge-404465:4478919')
    
    //compileOnly fg.deobf('curse.maven:electrodynamics-316867:4490532')
    //compileOnly fg.deobf('curse.maven:nuclear-science-318646:4490543')
    
    implementation fg.deobf("curse.maven:the-one-probe-245211:4629624")
    
    //implementation fg.deobf("local:create:1.19.2-0.5.1.a")
  	//implementation fg.deobf("local:flywheel-forge:1.19.2-0.6.8.a-14")
  	//implementation fg.deobf("com.tterrag.registrate:Registrate:MC1.19-1.1.5")
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title"     : project.name,
                "Specification-Vendor"    : "tom5454",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "tom5454",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

java {
    withSourcesJar()
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        def mavenURL = System.getProperty("mavenDir")
		if ("${mavenURL}" != "null") {
			maven {
				url = file(mavenURL)
			}
		}
    }
}
